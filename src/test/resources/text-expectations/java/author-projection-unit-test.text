package io.vlingo.xoomapp.infrastructure.persistence;

import io.vlingo.xoom.actors.World;
import io.vlingo.xoom.lattice.model.projection.Projection;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.xoom.symbio.store.dispatch.NoOpDispatcher;
import io.vlingo.xoom.symbio.store.state.StateStore;
import io.vlingo.xoom.symbio.store.state.inmemory.InMemoryStateStoreActor;
import org.junit.jupiter.api.BeforeEach;

import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import java.time.LocalDate;
import io.vlingo.xoomapp.infrastructure.*;
import java.util.*;

public class AuthorProjectionTests {

  private World world;
  private StateStore stateStore;
  private Projection projection;
  private Map<String, String> valueToProjectionId;

  @BeforeEach
  public void setUp() {
    world = World.startWithDefaults("test-state-store-projection");
    NoOpDispatcher dispatcher = new NoOpDispatcher();
    valueToProjectionId = new ConcurrentHashMap<>();
    stateStore = world.actorFor(StateStore.class, InMemoryStateStoreActor.class, Collections.singletonList(dispatcher));
    StatefulTypeRegistry statefulTypeRegistry = StatefulTypeRegistry.registerAll(world, stateStore, AuthorData.class);
    QueryModelStateStoreProvider.using(world.stage(), statefulTypeRegistry);
    projection = world.actorFor(Projection.class, AuthorProjectionActor.class, stateStore);
  }


  @Test
  public void withName() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void changeRank() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void addTag() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void addTags() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void replaceTags() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void removeTag() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void relateAuthor() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void relateAuthors() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void unrelateAuthor() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void replaceAllRelatedAuthors() {
    final CountingProjectionControl control = new CountingProjectionControl();
    final AccessSafely access = control.afterCompleting(2);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertNotNull(firstData.rank);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


}