package io.vlingo.xoomapp.infrastructure.resource;

import org.junit.jupiter.api.Test;

import static org.hamcrest.Matchers.is;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import io.vlingo.xoomapp.infrastructure.*;

public class AuthorResourceTests extends AbstractRestTest {

  @Test
  public void testEmptyResponse() {
    given()
    .when()
    .get("/authors")
    .then()
    .statusCode(200)
    .body(is(equalTo("[]")));
  }


  @Test
  public void testWithName() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .post("/authors/")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testChangeRank() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .patch("/authors/"+firstData.id+"/rank")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testRelateAuthor() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .patch("/"+firstData.id+"/related-author")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testRelateAuthors() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .patch("/"+firstData.id+"/related-authors")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testReplaceAllRelatedAuthors() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .put("/"+firstData.id+"/related-authors")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testUnrelateAuthor() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .delete("/"+firstData.id+"/related-author")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testAddTag() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .patch("/"+firstData.id+"/tag")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testAddTags() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .patch("/"+firstData.id+"/tags")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testReplaceTags() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .put("/"+firstData.id+"/tags")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testRemoveTag() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .delete("/"+firstData.id+"/tags")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


  @Test
  public void testChangeRank() {
    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), RankData.from(1, ClassificationData.from("first-author-rank-classification-label", new HashSet<>())), LocalDate.now(), new ArrayList<>(), new HashSet<>());

      AuthorData firstData = given()
        .when()
        .body(firstData)
        .patch("/authors/"+firstData.id+"/rank")
        .then()
        .statusCode(201)
        .extract()
        .body()
        .as(AuthorData.class);


    assertEquals(firstData.id, "1");
    assertEquals(firstData.name.firstName, "first-author-name-firstName");
    assertEquals(firstData.name.lastName, "first-author-name-lastName");
    assertEquals(firstData.rank.points, 1);
    assertEquals(firstData.rank.classification.label, "first-author-rank-classification-label");
    assertNotNull(firstData.rank.classification.classifiers);
    assertNotNull(firstData.availableOn);
    assertNotNull(firstData.tags);
    assertNotNull(firstData.relatedAuthors);
  }


}