package io.vlingo.xoomapp.infrastructure.exchange;

import io.vlingo.xoom.lattice.exchange.ExchangeReceiver;
import io.vlingo.xoom.lattice.grid.Grid;

import io.vlingo.xoomapp.model.author.AuthorEntity;
import io.vlingo.xoom.actors.Definition;
import io.vlingo.xoomapp.model.author.Author;
import io.vlingo.xoom.otherapp.event.OtherAggregateRemoved;
import io.vlingo.xoom.otherapp.event.OtherAggregateUpdated;
import io.vlingo.xoom.otherapp.event.OtherAggregateDefined;

public class AuthorExchangeReceivers {

  /**
   * See <a href="https://docs.vlingo.io/xoom-lattice/exchange#exchangereceiver">ExchangeReceiver</a>
   */
  static class OtherAggregateDefinedReceiver implements ExchangeReceiver<OtherAggregateDefined> {

    private final Grid stage;

    public OtherAggregateDefinedReceiver(final Grid stage) {
      this.stage = stage;
    }

    @Override
    public void receive(final OtherAggregateDefined event) {
      Author.withName(stage, event.name);
    }
  }

  /**
   * See <a href="https://docs.vlingo.io/xoom-lattice/exchange#exchangereceiver">ExchangeReceiver</a>
   */
  static class OtherAggregateUpdatedReceiver implements ExchangeReceiver<OtherAggregateUpdated> {

    private final Grid stage;

    public OtherAggregateUpdatedReceiver(final Grid stage) {
      this.stage = stage;
    }

    @Override
    public void receive(final OtherAggregateUpdated event) {
      stage.actorOf(Author.class, stage.addressFactory().from(data.id), Definition.has(AuthorEntity.class, Definition.parameters(data.id)))
              .andFinallyConsume(author -> author.changeRank(event.rank));
    }
  }

  /**
   * See <a href="https://docs.vlingo.io/xoom-lattice/exchange#exchangereceiver">ExchangeReceiver</a>
   */
  static class OtherAggregateRemovedReceiver implements ExchangeReceiver<OtherAggregateRemoved> {

    private final Grid stage;

    public OtherAggregateRemovedReceiver(final Grid stage) {
      this.stage = stage;
    }

    @Override
    public void receive(final OtherAggregateRemoved event) {
      stage.actorOf(Author.class, stage.addressFactory().from(data.id), Definition.has(AuthorEntity.class, Definition.parameters(data.id)))
              .andFinallyConsume(author -> author.block(event.name));
    }
  }

}
