package io.vlingo.xoomapp.infrastructure.exchange;

import io.vlingo.xoom.lattice.exchange.ExchangeReceiver;
import io.vlingo.xoom.lattice.grid.Grid;

import io.vlingo.xoomapp.model.author.AuthorEntity;
import io.vlingo.xoom.actors.Definition;
import io.vlingo.xoomapp.infrastructure.*;
import io.vlingo.xoomapp.model.author.Author;
import io.vlingo.xoomapp.model.*;

public class AuthorExchangeReceivers {

  /**
   * See <a href="https://docs.vlingo.io/xoom-lattice/exchange#exchangereceiver">ExchangeReceiver</a>
   */
  static class OtherAggregateDefined implements ExchangeReceiver<AuthorData> {

    private final Grid stage;

    public OtherAggregateDefined(final Grid stage) {
      this.stage = stage;
    }

    @Override
    public void receive(final AuthorData data) {
      final Name name = Name.from(data.name.firstName, data.name.lastName);
      Author.withName(stage, name);
    }
  }

  /**
   * See <a href="https://docs.vlingo.io/xoom-lattice/exchange#exchangereceiver">ExchangeReceiver</a>
   */
  static class OtherAggregateUpdated implements ExchangeReceiver<AuthorData> {

    private final Grid stage;

    public OtherAggregateUpdated(final Grid stage) {
      this.stage = stage;
    }

    @Override
    public void receive(final AuthorData data) {
      final Classifier classifier = Classifier.from(data.rank.classification.classifier.name);
      final Classification classification = Classification.from(data.rank.classification.label, classifier);
      final Rank rank = Rank.from(data.rank.points, classification);
      stage.actorOf(Author.class, stage.addressFactory().from(data.id), Definition.has(AuthorEntity.class, Definition.parameters(data.id)))
              .andFinallyConsume(author -> author.changeRank(rank));
    }
  }

  /**
   * See <a href="https://docs.vlingo.io/xoom-lattice/exchange#exchangereceiver">ExchangeReceiver</a>
   */
  static class OtherAggregateRemoved implements ExchangeReceiver<AuthorData> {

    private final Grid stage;

    public OtherAggregateRemoved(final Grid stage) {
      this.stage = stage;
    }

    @Override
    public void receive(final AuthorData data) {
      final Name name = Name.from(data.name.firstName, data.name.lastName);
      stage.actorOf(Author.class, stage.addressFactory().from(data.id), Definition.has(AuthorEntity.class, Definition.parameters(data.id)))
              .andFinallyConsume(author -> author.block(name));
    }
  }

}
