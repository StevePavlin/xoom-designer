package io.vlingo.xoomapp.infrastructure.persistence;

import io.vlingo.xoom.actors.World;
import io.vlingo.xoom.common.serialization.JsonSerialization;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.xoom.symbio.BaseEntry;
import io.vlingo.xoom.symbio.Metadata;
import io.vlingo.xoom.symbio.store.dispatch.NoOpDispatcher;
import io.vlingo.xoom.symbio.store.state.StateStore;
import io.vlingo.xoom.symbio.store.state.inmemory.InMemoryStateStoreActor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Collections;
import java.util.Map;
import java.util.UUID;

import java.time.LocalDate;
import io.vlingo.xoomapp.infrastructure.*;
import java.util.*;
import io.vlingo.xoomapp.model.author.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class AuthorProjectionTest {

  private World world;
  private StateStore stateStore;
  private Author entity;

  @BeforeEach
  public void setUp() {
    world = World.startWithDefaults("test-state-store-projection");
    NoOpDispatcher dispatcher = new NoOpDispatcher();
    stateStore = world.actorFor(StateStore.class, InMemoryStateStoreActor.class, Collections.singletonList(dispatcher));
    StatefulTypeRegistry statefulTypeRegistry = StatefulTypeRegistry.registerAll(world, stateStore, AuthorData.class);
    QueryModelStateStoreProvider.using(world.stage(), statefulTypeRegistry);
    entity = world.actorFor(Author.class, AuthorEntity.class, "1");
  }

  @Test
  public void withName() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRegistered item = entity.AuthorRegistered(data.id, data.name, data.availableOn).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void changeRank() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRanked item = entity.AuthorRanked(data.id, data.rank).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void addTag() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRelated item = entity.AuthorRelated(data.id, data.tags).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void addTags() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRelated item = entity.AuthorRelated(data.id, data.tags).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void replaceTags() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRelated item = entity.AuthorRelated(data.id, data.tags).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void removeTag() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorUnrelated item = entity.AuthorUnrelated(data.id, data.tags).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void relateAuthor() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRelated item = entity.AuthorRelated(data.id, data.relatedAuthors).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void relateAuthors() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRelated item = entity.AuthorRelated(data.id, data.relatedAuthors).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void unrelateAuthor() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorUnrelated item = entity.AuthorUnrelated(data.id, data.relatedAuthors).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

  @Test
  public void replaceAllRelatedAuthors() {

    final AuthorData firstData = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorData secondData = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), LocalDate.now(), new ArrayList<>(), new HashSet<>());
    final AuthorRelated item = entity.AuthorRelated(data.id, data.relatedAuthors).await();


    assertEquals(item.id, "1");
    assertEquals(item.name.firstName, "first-author-name-firstName");
    assertEquals(item.name.lastName, "first-author-name-lastName");
    assertNotNull(item.rank);
    assertNotNull(item.availableOn);
    assertNotNull(item.tags);
    assertNotNull(item.relatedAuthors);
  }

}
